{"version":3,"sources":["twemoji.js"],"names":["twemoji","createText","text","document","createTextNode","escapeHTML","s","replace","rescaper","replacer","defaultImageSrcGenerator","icon","options","concat","base","size","ext","grabAllTextNodes","node","allText","subnode","nodeType","childNodes","length","push","shouldntBeParsed","test","nodeName","grabTheRightIcon","variant","toCodePoint","slice","charAt","parseNode","attrib","attrname","modified","fragment","match","i","index","img","alt","src","createDocumentFragment","nodeValue","re","exec","appendChild","callback","Image","onerror","setAttribute","attributes","hasOwnProperty","indexOf","hasAttribute","className","parentNode","replaceChild","parseString","str","ret","m","escaper","returnNull","toSizeSquaredAsset","value","fromCodePoint","codepoint","code","parseInt","fromCharCode","parse","what","how","folder","String","lastIndex","result","unicodeSurrogates","sep","r","c","p","charCodeAt","toString","join","location","protocol","convert","this","&","<",">","'","\""],"mappings":"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","file":"twemoji.js","sourcesContent":["/*jslint indent: 2, browser: true, bitwise: true, plusplus: true */\nvar twemoji = (function (\n  /*! Copyright Twitter Inc. and other contributors. Licensed under MIT *//*\n    https://github.com/twitter/twemoji/blob/gh-pages/LICENSE\n  */\n\n  // WARNING:   this file is generated automatically via\n  //            `node twemoji-generator.js`\n  //            please update its `createTwemoji` function\n  //            at the bottom of the same file instead.\n\n) {\n  'use strict';\n\n  /*jshint maxparams:4 */\n\n  var\n    // the exported module object\n    twemoji = {\n\n\n    /////////////////////////\n    //      properties     //\n    /////////////////////////\n\n      // default assets url, by default will be Twitter Inc. CDN\n      base: (location.protocol === 'https:' ? 'https:' : 'http:') +\n            '//twemoji.maxcdn.com/',\n\n      // default assets file extensions, by default '.png'\n      ext: '.png',\n\n      // default assets/folder size, by default \"36x36\"\n      // available via Twitter CDN: 16, 36, 72\n      size: '36x36',\n\n      // default class name, by default 'emoji'\n      className: 'emoji',\n\n      // basic utilities / helpers to convert code points\n      // to JavaScript surrogates and vice versa\n      convert: {\n\n        /**\n         * Given an HEX codepoint, returns UTF16 surrogate pairs.\n         *\n         * @param   string  generic codepoint, i.e. '1F4A9'\n         * @return  string  codepoint transformed into utf16 surrogates pair,\n         *          i.e. \\uD83D\\uDCA9\n         *\n         * @example\n         *  twemoji.convert.fromCodePoint('1f1e8');\n         *  // \"\\ud83c\\udde8\"\n         *\n         *  '1f1e8-1f1f3'.split('-').map(twemoji.convert.fromCodePoint).join('')\n         *  // \"\\ud83c\\udde8\\ud83c\\uddf3\"\n         */\n        fromCodePoint: fromCodePoint,\n\n        /**\n         * Given UTF16 surrogate pairs, returns the equivalent HEX codepoint.\n         *\n         * @param   string  generic utf16 surrogates pair, i.e. \\uD83D\\uDCA9\n         * @param   string  optional separator for double code points, default='-'\n         * @return  string  utf16 transformed into codepoint, i.e. '1F4A9'\n         *\n         * @example\n         *  twemoji.convert.toCodePoint('\\ud83c\\udde8\\ud83c\\uddf3');\n         *  // \"1f1e8-1f1f3\"\n         *\n         *  twemoji.convert.toCodePoint('\\ud83c\\udde8\\ud83c\\uddf3', '~');\n         *  // \"1f1e8~1f1f3\"\n         */\n        toCodePoint: toCodePoint\n      },\n\n\n    /////////////////////////\n    //       methods       //\n    /////////////////////////\n\n      /**\n       * User first: used to remove missing images\n       * preserving the original text intent when\n       * a fallback for network problems is desired.\n       * Automatically added to Image nodes via DOM\n       * It could be recycled for string operations via:\n       *  $('img.emoji').on('error', twemoji.onerror)\n       */\n      onerror: function onerror() {\n        if (this.parentNode) {\n          this.parentNode.replaceChild(createText(this.alt), this);\n        }\n      },\n\n      /**\n       * Main method/logic to generate either <img> tags or HTMLImage nodes.\n       *  \"emojify\" a generic text or DOM Element.\n       *\n       * @overloads\n       *\n       * String replacement for `innerHTML` or server side operations\n       *  twemoji.parse(string);\n       *  twemoji.parse(string, Function);\n       *  twemoji.parse(string, Object);\n       *\n       * HTMLElement tree parsing for safer operations over existing DOM\n       *  twemoji.parse(HTMLElement);\n       *  twemoji.parse(HTMLElement, Function);\n       *  twemoji.parse(HTMLElement, Object);\n       *\n       * @param   string|HTMLElement  the source to parse and enrich with emoji.\n       *\n       *          string              replace emoji matches with <img> tags.\n       *                              Mainly used to inject emoji via `innerHTML`\n       *                              It does **not** parse the string or validate it,\n       *                              it simply replaces found emoji with a tag.\n       *                              NOTE: be sure this won't affect security.\n       *\n       *          HTMLElement         walk through the DOM tree and find emoji\n       *                              that are inside **text node only** (nodeType === 3)\n       *                              Mainly used to put emoji in already generated DOM\n       *                              without compromising surrounding nodes and\n       *                              **avoiding** the usage of `innerHTML`.\n       *                              NOTE: Using DOM elements instead of strings should\n       *                              improve security without compromising too much\n       *                              performance compared with a less safe `innerHTML`.\n       *\n       * @param   Function|Object  [optional]\n       *                              either the callback that will be invoked or an object\n       *                              with all properties to use per each found emoji.\n       *\n       *          Function            if specified, this will be invoked per each emoji\n       *                              that has been found through the RegExp except\n       *                              those follwed by the invariant \\uFE0E (\"as text\").\n       *                              Once invoked, parameters will be:\n       *\n       *                                codePoint:string  the lower case HEX code point\n       *                                                  i.e. \"1f4a9\"\n       *\n       *                                options:Object    all info for this parsing operation\n       *\n       *                                variant:char      the optional \\uFE0F (\"as image\")\n       *                                                  variant, in case this info\n       *                                                  is anyhow meaningful.\n       *                                                  By default this is ignored.\n       *\n       *                              If such callback will return a falsy value instead\n       *                              of a valid `src` to use for the image, nothing will\n       *                              actually change for that specific emoji.\n       *\n       *\n       *          Object              if specified, an object containing the following properties\n       *\n       *            callback   Function  the callback to invoke per each found emoji.\n       *            base       string    the base url, by default twemoji.base\n       *            ext        string    the image extension, by default twemoji.ext\n       *            size       string    the assets size, by default twemoji.size\n       *\n       * @example\n       *\n       *  twemoji.parse(\"I \\u2764\\uFE0F emoji!\");\n       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/2764.gif\"> emoji!\n       *\n       *\n       *  twemoji.parse(\"I \\u2764\\uFE0F emoji!\", function(icon, options, variant) {\n       *    return '/assets/' + icon + '.gif';\n       *  });\n       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/2764.gif\"> emoji!\n       *\n       *\n       * twemoji.parse(\"I \\u2764\\uFE0F emoji!\", {\n       *   size: 72,\n       *   callback: function(icon, options, variant) {\n       *     return '/assets/' + options.size + '/' + icon + options.ext;\n       *   }\n       * });\n       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/72x72/2764.png\"> emoji!\n       *\n       */\n      parse: parse,\n\n      /**\n       * Given a string, invokes the callback argument\n       *  per each emoji found in such string.\n       * This is the most raw version used by\n       *  the .parse(string) method itself.\n       *\n       * @param   string    generic string to parse\n       * @param   Function  a generic callback that will be\n       *                    invoked to replace the content.\n       *                    This calback wil receive standard\n       *                    String.prototype.replace(str, callback)\n       *                    arguments such:\n       *  callback(\n       *    match,  // the emoji match\n       *    icon,   // the emoji text (same as text)\n       *    variant // either '\\uFE0E' or '\\uFE0F', if present\n       *  );\n       *\n       *                    and others commonly received via replace.\n       *\n       *  NOTE: When the variant \\uFE0E is found, remember this is an explicit intent\n       *  from the user: the emoji should **not** be replaced with an image.\n       *  In \\uFE0F case one, it's the opposite, it should be graphic.\n       *  This utility convetion is that only \\uFE0E are not translated into images.\n       */\n      replace: replace,\n\n      /**\n       * Simplify string tests against emoji.\n       *\n       * @param   string  some text that might contain emoji\n       * @return  boolean true if any emoji was found, false otherwise.\n       *\n       * @example\n       *\n       *  if (twemoji.test(someContent)) {\n       *    console.log(\"emoji All The Things!\");\n       *  }\n       */\n      test: test\n    },\n\n    // used to escape HTML special chars in attributes\n    escaper = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      \"'\": '&#39;',\n      '\"': '&quot;'\n    },\n\n    // RegExp based on emoji's official Unicode standards\n    // http://www.unicode.org/Public/UNIDATA/EmojiSources.txt\n    re = /((?:\\ud83c\\udde8\\ud83c\\uddf3|\\ud83c\\uddfa\\ud83c\\uddf8|\\ud83c\\uddf7\\ud83c\\uddfa|\\ud83c\\uddf0\\ud83c\\uddf7|\\ud83c\\uddef\\ud83c\\uddf5|\\ud83c\\uddee\\ud83c\\uddf9|\\ud83c\\uddec\\ud83c\\udde7|\\ud83c\\uddeb\\ud83c\\uddf7|\\ud83c\\uddea\\ud83c\\uddf8|\\ud83c\\udde9\\ud83c\\uddea|\\u0039\\ufe0f?\\u20e3|\\u0038\\ufe0f?\\u20e3|\\u0037\\ufe0f?\\u20e3|\\u0036\\ufe0f?\\u20e3|\\u0035\\ufe0f?\\u20e3|\\u0034\\ufe0f?\\u20e3|\\u0033\\ufe0f?\\u20e3|\\u0032\\ufe0f?\\u20e3|\\u0031\\ufe0f?\\u20e3|\\u0030\\ufe0f?\\u20e3|\\u0023\\ufe0f?\\u20e3|\\ud83d\\udeb3|\\ud83d\\udeb1|\\ud83d\\udeb0|\\ud83d\\udeaf|\\ud83d\\udeae|\\ud83d\\udea6|\\ud83d\\udea3|\\ud83d\\udea1|\\ud83d\\udea0|\\ud83d\\ude9f|\\ud83d\\ude9e|\\ud83d\\ude9d|\\ud83d\\ude9c|\\ud83d\\ude9b|\\ud83d\\ude98|\\ud83d\\ude96|\\ud83d\\ude94|\\ud83d\\ude90|\\ud83d\\ude8e|\\ud83d\\ude8d|\\ud83d\\ude8b|\\ud83d\\ude8a|\\ud83d\\ude88|\\ud83d\\ude86|\\ud83d\\ude82|\\ud83d\\ude81|\\ud83d\\ude36|\\ud83d\\ude34|\\ud83d\\ude2f|\\ud83d\\ude2e|\\ud83d\\ude2c|\\ud83d\\ude27|\\ud83d\\ude26|\\ud83d\\ude1f|\\ud83d\\ude1b|\\ud83d\\ude19|\\ud83d\\ude17|\\ud83d\\ude15|\\ud83d\\ude11|\\ud83d\\ude10|\\ud83d\\ude0e|\\ud83d\\ude08|\\ud83d\\ude07|\\ud83d\\ude00|\\ud83d\\udd67|\\ud83d\\udd66|\\ud83d\\udd65|\\ud83d\\udd64|\\ud83d\\udd63|\\ud83d\\udd62|\\ud83d\\udd61|\\ud83d\\udd60|\\ud83d\\udd5f|\\ud83d\\udd5e|\\ud83d\\udd5d|\\ud83d\\udd5c|\\ud83d\\udd2d|\\ud83d\\udd2c|\\ud83d\\udd15|\\ud83d\\udd09|\\ud83d\\udd08|\\ud83d\\udd07|\\ud83d\\udd06|\\ud83d\\udd05|\\ud83d\\udd04|\\ud83d\\udd02|\\ud83d\\udd01|\\ud83d\\udd00|\\ud83d\\udcf5|\\ud83d\\udcef|\\ud83d\\udced|\\ud83d\\udcec|\\ud83d\\udcb7|\\ud83d\\udcb6|\\ud83d\\udcad|\\ud83d\\udc6d|\\ud83d\\udc6c|\\ud83d\\udc65|\\ud83d\\udc2a|\\ud83d\\udc16|\\ud83d\\udc15|\\ud83d\\udc13|\\ud83d\\udc10|\\ud83d\\udc0f|\\ud83d\\udc0b|\\ud83d\\udc0a|\\ud83d\\udc09|\\ud83d\\udc08|\\ud83d\\udc07|\\ud83d\\udc06|\\ud83d\\udc05|\\ud83d\\udc04|\\ud83d\\udc03|\\ud83d\\udc02|\\ud83d\\udc01|\\ud83d\\udc00|\\ud83c\\udfe4|\\ud83c\\udfc9|\\ud83c\\udfc7|\\ud83c\\udf7c|\\ud83c\\udf50|\\ud83c\\udf4b|\\ud83c\\udf33|\\ud83c\\udf32|\\ud83c\\udf1e|\\ud83c\\udf1d|\\ud83c\\udf1c|\\ud83c\\udf1a|\\ud83c\\udf18|\\ud83c\\udccf|\\ud83c\\udd8e|\\ud83c\\udd91|\\ud83c\\udd92|\\ud83c\\udd93|\\ud83c\\udd94|\\ud83c\\udd95|\\ud83c\\udd96|\\ud83c\\udd97|\\ud83c\\udd98|\\ud83c\\udd99|\\ud83c\\udd9a|\\ud83d\\udc77|\\ud83d\\udec5|\\ud83d\\udec4|\\ud83d\\udec3|\\ud83d\\udec2|\\ud83d\\udec1|\\ud83d\\udebf|\\ud83d\\udeb8|\\ud83d\\udeb7|\\ud83d\\udeb5|\\ud83c\\ude01|\\ud83c\\ude32|\\ud83c\\ude33|\\ud83c\\ude34|\\ud83c\\ude35|\\ud83c\\ude36|\\ud83c\\ude38|\\ud83c\\ude39|\\ud83c\\ude3a|\\ud83c\\ude50|\\ud83c\\ude51|\\ud83c\\udf00|\\ud83c\\udf01|\\ud83c\\udf02|\\ud83c\\udf03|\\ud83c\\udf04|\\ud83c\\udf05|\\ud83c\\udf06|\\ud83c\\udf07|\\ud83c\\udf08|\\ud83c\\udf09|\\ud83c\\udf0a|\\ud83c\\udf0b|\\ud83c\\udf0c|\\ud83c\\udf0f|\\ud83c\\udf11|\\ud83c\\udf13|\\ud83c\\udf14|\\ud83c\\udf15|\\ud83c\\udf19|\\ud83c\\udf1b|\\ud83c\\udf1f|\\ud83c\\udf20|\\ud83c\\udf30|\\ud83c\\udf31|\\ud83c\\udf34|\\ud83c\\udf35|\\ud83c\\udf37|\\ud83c\\udf38|\\ud83c\\udf39|\\ud83c\\udf3a|\\ud83c\\udf3b|\\ud83c\\udf3c|\\ud83c\\udf3d|\\ud83c\\udf3e|\\ud83c\\udf3f|\\ud83c\\udf40|\\ud83c\\udf41|\\ud83c\\udf42|\\ud83c\\udf43|\\ud83c\\udf44|\\ud83c\\udf45|\\ud83c\\udf46|\\ud83c\\udf47|\\ud83c\\udf48|\\ud83c\\udf49|\\ud83c\\udf4a|\\ud83c\\udf4c|\\ud83c\\udf4d|\\ud83c\\udf4e|\\ud83c\\udf4f|\\ud83c\\udf51|\\ud83c\\udf52|\\ud83c\\udf53|\\ud83c\\udf54|\\ud83c\\udf55|\\ud83c\\udf56|\\ud83c\\udf57|\\ud83c\\udf58|\\ud83c\\udf59|\\ud83c\\udf5a|\\ud83c\\udf5b|\\ud83c\\udf5c|\\ud83c\\udf5d|\\ud83c\\udf5e|\\ud83c\\udf5f|\\ud83c\\udf60|\\ud83c\\udf61|\\ud83c\\udf62|\\ud83c\\udf63|\\ud83c\\udf64|\\ud83c\\udf65|\\ud83c\\udf66|\\ud83c\\udf67|\\ud83c\\udf68|\\ud83c\\udf69|\\ud83c\\udf6a|\\ud83c\\udf6b|\\ud83c\\udf6c|\\ud83c\\udf6d|\\ud83c\\udf6e|\\ud83c\\udf6f|\\ud83c\\udf70|\\ud83c\\udf71|\\ud83c\\udf72|\\ud83c\\udf73|\\ud83c\\udf74|\\ud83c\\udf75|\\ud83c\\udf76|\\ud83c\\udf77|\\ud83c\\udf78|\\ud83c\\udf79|\\ud83c\\udf7a|\\ud83c\\udf7b|\\ud83c\\udf80|\\ud83c\\udf81|\\ud83c\\udf82|\\ud83c\\udf83|\\ud83c\\udf84|\\ud83c\\udf85|\\ud83c\\udf86|\\ud83c\\udf87|\\ud83c\\udf88|\\ud83c\\udf89|\\ud83c\\udf8a|\\ud83c\\udf8b|\\ud83c\\udf8c|\\ud83c\\udf8d|\\ud83c\\udf8e|\\ud83c\\udf8f|\\ud83c\\udf90|\\ud83c\\udf91|\\ud83c\\udf92|\\ud83c\\udf93|\\ud83c\\udfa0|\\ud83c\\udfa1|\\ud83c\\udfa2|\\ud83c\\udfa3|\\ud83c\\udfa4|\\ud83c\\udfa5|\\ud83c\\udfa6|\\ud83c\\udfa7|\\ud83c\\udfa8|\\ud83c\\udfa9|\\ud83c\\udfaa|\\ud83c\\udfab|\\ud83c\\udfac|\\ud83c\\udfad|\\ud83c\\udfae|\\ud83c\\udfaf|\\ud83c\\udfb0|\\ud83c\\udfb1|\\ud83c\\udfb2|\\ud83c\\udfb3|\\ud83c\\udfb4|\\ud83c\\udfb5|\\ud83c\\udfb6|\\ud83c\\udfb7|\\ud83c\\udfb8|\\ud83c\\udfb9|\\ud83c\\udfba|\\ud83c\\udfbb|\\ud83c\\udfbc|\\ud83c\\udfbd|\\ud83c\\udfbe|\\ud83c\\udfbf|\\ud83c\\udfc0|\\ud83c\\udfc1|\\ud83c\\udfc2|\\ud83c\\udfc3|\\ud83c\\udfc4|\\ud83c\\udfc6|\\ud83c\\udfc8|\\ud83c\\udfca|\\ud83c\\udfe0|\\ud83c\\udfe1|\\ud83c\\udfe2|\\ud83c\\udfe3|\\ud83c\\udfe5|\\ud83c\\udfe6|\\ud83c\\udfe7|\\ud83c\\udfe8|\\ud83c\\udfe9|\\ud83c\\udfea|\\ud83c\\udfeb|\\ud83c\\udfec|\\ud83c\\udfed|\\ud83c\\udfee|\\ud83c\\udfef|\\ud83c\\udff0|\\ud83d\\udc0c|\\ud83d\\udc0d|\\ud83d\\udc0e|\\ud83d\\udc11|\\ud83d\\udc12|\\ud83d\\udc14|\\ud83d\\udc17|\\ud83d\\udc18|\\ud83d\\udc19|\\ud83d\\udc1a|\\ud83d\\udc1b|\\ud83d\\udc1c|\\ud83d\\udc1d|\\ud83d\\udc1e|\\ud83d\\udc1f|\\ud83d\\udc20|\\ud83d\\udc21|\\ud83d\\udc22|\\ud83d\\udc23|\\ud83d\\udc24|\\ud83d\\udc25|\\ud83d\\udc26|\\ud83d\\udc27|\\ud83d\\udc28|\\ud83d\\udc29|\\ud83d\\udc2b|\\ud83d\\udc2c|\\ud83d\\udc2d|\\ud83d\\udc2e|\\ud83d\\udc2f|\\ud83d\\udc30|\\ud83d\\udc31|\\ud83d\\udc32|\\ud83d\\udc33|\\ud83d\\udc34|\\ud83d\\udc35|\\ud83d\\udc36|\\ud83d\\udc37|\\ud83d\\udc38|\\ud83d\\udc39|\\ud83d\\udc3a|\\ud83d\\udc3b|\\ud83d\\udc3c|\\ud83d\\udc3d|\\ud83d\\udc3e|\\ud83d\\udc40|\\ud83d\\udc42|\\ud83d\\udc43|\\ud83d\\udc44|\\ud83d\\udc45|\\ud83d\\udc46|\\ud83d\\udc47|\\ud83d\\udc48|\\ud83d\\udc49|\\ud83d\\udc4a|\\ud83d\\udc4b|\\ud83d\\udc4c|\\ud83d\\udc4d|\\ud83d\\udc4e|\\ud83d\\udc4f|\\ud83d\\udc50|\\ud83d\\udc51|\\ud83d\\udc52|\\ud83d\\udc53|\\ud83d\\udc54|\\ud83d\\udc55|\\ud83d\\udc56|\\ud83d\\udc57|\\ud83d\\udc58|\\ud83d\\udc59|\\ud83d\\udc5a|\\ud83d\\udc5b|\\ud83d\\udc5c|\\ud83d\\udc5d|\\ud83d\\udc5e|\\ud83d\\udc5f|\\ud83d\\udc60|\\ud83d\\udc61|\\ud83d\\udc62|\\ud83d\\udc63|\\ud83d\\udc64|\\ud83d\\udc66|\\ud83d\\udc67|\\ud83d\\udc68|\\ud83d\\udc69|\\ud83d\\udc6a|\\ud83d\\udc6b|\\ud83d\\udc6e|\\ud83d\\udc6f|\\ud83d\\udc70|\\ud83d\\udc71|\\ud83d\\udc72|\\ud83d\\udc73|\\ud83d\\udc74|\\ud83d\\udc75|\\ud83d\\udc76|\\ud83d\\udeb4|\\ud83d\\udc78|\\ud83d\\udc79|\\ud83d\\udc7a|\\ud83d\\udc7b|\\ud83d\\udc7c|\\ud83d\\udc7d|\\ud83d\\udc7e|\\ud83d\\udc7f|\\ud83d\\udc80|\\ud83d\\udc81|\\ud83d\\udc82|\\ud83d\\udc83|\\ud83d\\udc84|\\ud83d\\udc85|\\ud83d\\udc86|\\ud83d\\udc87|\\ud83d\\udc88|\\ud83d\\udc89|\\ud83d\\udc8a|\\ud83d\\udc8b|\\ud83d\\udc8c|\\ud83d\\udc8d|\\ud83d\\udc8e|\\ud83d\\udc8f|\\ud83d\\udc90|\\ud83d\\udc91|\\ud83d\\udc92|\\ud83d\\udc93|\\ud83d\\udc94|\\ud83d\\udc95|\\ud83d\\udc96|\\ud83d\\udc97|\\ud83d\\udc98|\\ud83d\\udc99|\\ud83d\\udc9a|\\ud83d\\udc9b|\\ud83d\\udc9c|\\ud83d\\udc9d|\\ud83d\\udc9e|\\ud83d\\udc9f|\\ud83d\\udca0|\\ud83d\\udca1|\\ud83d\\udca2|\\ud83d\\udca3|\\ud83d\\udca4|\\ud83d\\udca5|\\ud83d\\udca6|\\ud83d\\udca7|\\ud83d\\udca8|\\ud83d\\udca9|\\ud83d\\udcaa|\\ud83d\\udcab|\\ud83d\\udcac|\\ud83d\\udcae|\\ud83d\\udcaf|\\ud83d\\udcb0|\\ud83d\\udcb1|\\ud83d\\udcb2|\\ud83d\\udcb3|\\ud83d\\udcb4|\\ud83d\\udcb5|\\ud83d\\udcb8|\\ud83d\\udcb9|\\ud83d\\udcba|\\ud83d\\udcbb|\\ud83d\\udcbc|\\ud83d\\udcbd|\\ud83d\\udcbe|\\ud83d\\udcbf|\\ud83d\\udcc0|\\ud83d\\udcc1|\\ud83d\\udcc2|\\ud83d\\udcc3|\\ud83d\\udcc4|\\ud83d\\udcc5|\\ud83d\\udcc6|\\ud83d\\udcc7|\\ud83d\\udcc8|\\ud83d\\udcc9|\\ud83d\\udcca|\\ud83d\\udccb|\\ud83d\\udccc|\\ud83d\\udccd|\\ud83d\\udcce|\\ud83d\\udccf|\\ud83d\\udcd0|\\ud83d\\udcd1|\\ud83d\\udcd2|\\ud83d\\udcd3|\\ud83d\\udcd4|\\ud83d\\udcd5|\\ud83d\\udcd6|\\ud83d\\udcd7|\\ud83d\\udcd8|\\ud83d\\udcd9|\\ud83d\\udcda|\\ud83d\\udcdb|\\ud83d\\udcdc|\\ud83d\\udcdd|\\ud83d\\udcde|\\ud83d\\udcdf|\\ud83d\\udce0|\\ud83d\\udce1|\\ud83d\\udce2|\\ud83d\\udce3|\\ud83d\\udce4|\\ud83d\\udce5|\\ud83d\\udce6|\\ud83d\\udce7|\\ud83d\\udce8|\\ud83d\\udce9|\\ud83d\\udcea|\\ud83d\\udceb|\\ud83d\\udcee|\\ud83d\\udcf0|\\ud83d\\udcf1|\\ud83d\\udcf2|\\ud83d\\udcf3|\\ud83d\\udcf4|\\ud83d\\udcf6|\\ud83d\\udcf7|\\ud83d\\udcf9|\\ud83d\\udcfa|\\ud83d\\udcfb|\\ud83d\\udcfc|\\ud83d\\udd03|\\ud83d\\udd0a|\\ud83d\\udd0b|\\ud83d\\udd0c|\\ud83d\\udd0d|\\ud83d\\udd0e|\\ud83d\\udd0f|\\ud83d\\udd10|\\ud83d\\udd11|\\ud83d\\udd12|\\ud83d\\udd13|\\ud83d\\udd14|\\ud83d\\udd16|\\ud83d\\udd17|\\ud83d\\udd18|\\ud83d\\udd19|\\ud83d\\udd1a|\\ud83d\\udd1b|\\ud83d\\udd1c|\\ud83d\\udd1d|\\ud83d\\udd1e|\\ud83d\\udd1f|\\ud83d\\udd20|\\ud83d\\udd21|\\ud83d\\udd22|\\ud83d\\udd23|\\ud83d\\udd24|\\ud83d\\udd25|\\ud83d\\udd26|\\ud83d\\udd27|\\ud83d\\udd28|\\ud83d\\udd29|\\ud83d\\udd2a|\\ud83d\\udd2b|\\ud83d\\udd2e|\\ud83d\\udd2f|\\ud83d\\udd30|\\ud83d\\udd31|\\ud83d\\udd32|\\ud83d\\udd33|\\ud83d\\udd34|\\ud83d\\udd35|\\ud83d\\udd36|\\ud83d\\udd37|\\ud83d\\udd38|\\ud83d\\udd39|\\ud83d\\udd3a|\\ud83d\\udd3b|\\ud83d\\udd3c|\\ud83d\\udd3d|\\ud83d\\udd50|\\ud83d\\udd51|\\ud83d\\udd52|\\ud83d\\udd53|\\ud83d\\udd54|\\ud83d\\udd55|\\ud83d\\udd56|\\ud83d\\udd57|\\ud83d\\udd58|\\ud83d\\udd59|\\ud83d\\udd5a|\\ud83d\\udd5b|\\ud83d\\uddfb|\\ud83d\\uddfc|\\ud83d\\uddfd|\\ud83d\\uddfe|\\ud83d\\uddff|\\ud83d\\ude01|\\ud83d\\ude02|\\ud83d\\ude03|\\ud83d\\ude04|\\ud83d\\ude05|\\ud83d\\ude06|\\ud83d\\ude09|\\ud83d\\ude0a|\\ud83d\\ude0b|\\ud83d\\ude0c|\\ud83d\\ude0d|\\ud83d\\ude0f|\\ud83d\\ude12|\\ud83d\\ude13|\\ud83d\\ude14|\\ud83d\\ude16|\\ud83d\\ude18|\\ud83d\\ude1a|\\ud83d\\ude1c|\\ud83d\\ude1d|\\ud83d\\ude1e|\\ud83d\\ude20|\\ud83d\\ude21|\\ud83d\\ude22|\\ud83d\\ude23|\\ud83d\\ude24|\\ud83d\\ude25|\\ud83d\\ude28|\\ud83d\\ude29|\\ud83d\\ude2a|\\ud83d\\ude2b|\\ud83d\\ude2d|\\ud83d\\ude30|\\ud83d\\ude31|\\ud83d\\ude32|\\ud83d\\ude33|\\ud83d\\ude35|\\ud83d\\ude37|\\ud83d\\ude38|\\ud83d\\ude39|\\ud83d\\ude3a|\\ud83d\\ude3b|\\ud83d\\ude3c|\\ud83d\\ude3d|\\ud83d\\ude3e|\\ud83d\\ude3f|\\ud83d\\ude40|\\ud83d\\ude45|\\ud83d\\ude46|\\ud83d\\ude47|\\ud83d\\ude48|\\ud83d\\ude49|\\ud83d\\ude4a|\\ud83d\\ude4b|\\ud83d\\ude4c|\\ud83d\\ude4d|\\ud83d\\ude4e|\\ud83d\\ude4f|\\ud83d\\ude80|\\ud83d\\ude83|\\ud83d\\ude84|\\ud83d\\ude85|\\ud83d\\ude87|\\ud83d\\ude89|\\ud83d\\ude8c|\\ud83d\\ude8f|\\ud83d\\ude91|\\ud83d\\ude92|\\ud83d\\ude93|\\ud83d\\ude95|\\ud83d\\ude97|\\ud83d\\ude99|\\ud83d\\ude9a|\\ud83d\\udea2|\\ud83d\\udea4|\\ud83d\\udea5|\\ud83d\\udea7|\\ud83d\\udea8|\\ud83d\\udea9|\\ud83d\\udeaa|\\ud83d\\udeab|\\ud83d\\udeac|\\ud83d\\udead|\\ud83d\\udeb2|\\ud83d\\udeb6|\\ud83d\\udeb9|\\ud83d\\udeba|\\ud83d\\udebb|\\ud83d\\udebc|\\ud83d\\udebd|\\ud83d\\udebe|\\ud83d\\udec0|\\ud83c\\udde6|\\ud83c\\udde7|\\ud83c\\udde8|\\ud83c\\udde9|\\ud83c\\uddea|\\ud83c\\uddeb|\\ud83c\\uddec|\\ud83c\\udded|\\ud83c\\uddee|\\ud83c\\uddef|\\ud83c\\uddf0|\\ud83c\\uddf1|\\ud83c\\uddf2|\\ud83c\\uddf3|\\ud83c\\uddf4|\\ud83c\\uddf5|\\ud83c\\uddf6|\\ud83c\\uddf7|\\ud83c\\uddf8|\\ud83c\\uddf9|\\ud83c\\uddfa|\\ud83c\\uddfb|\\ud83c\\uddfc|\\ud83c\\uddfd|\\ud83c\\uddfe|\\ud83c\\uddff|\\ud83c\\udf0d|\\ud83c\\udf0e|\\ud83c\\udf10|\\ud83c\\udf12|\\ud83c\\udf16|\\ud83c\\udf17|\\ue50a|\\u27b0|\\u2797|\\u2796|\\u2795|\\u2755|\\u2754|\\u2753|\\u274e|\\u274c|\\u2728|\\u270b|\\u270a|\\u2705|\\u26ce|\\u23f3|\\u23f0|\\u23ec|\\u23eb|\\u23ea|\\u23e9|\\u27bf|\\u00a9|\\u00ae)|(?:(?:\\ud83c\\udc04|\\ud83c\\udd70|\\ud83c\\udd71|\\ud83c\\udd7e|\\ud83c\\udd7f|\\ud83c\\ude02|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c\\ude37|\\u3299|\\u303d|\\u3030|\\u2b55|\\u2b50|\\u2b1c|\\u2b1b|\\u2b07|\\u2b06|\\u2b05|\\u2935|\\u2934|\\u27a1|\\u2764|\\u2757|\\u2747|\\u2744|\\u2734|\\u2733|\\u2716|\\u2714|\\u2712|\\u270f|\\u270c|\\u2709|\\u2708|\\u2702|\\u26fd|\\u26fa|\\u26f5|\\u26f3|\\u26f2|\\u26ea|\\u26d4|\\u26c5|\\u26c4|\\u26be|\\u26bd|\\u26ab|\\u26aa|\\u26a1|\\u26a0|\\u2693|\\u267f|\\u267b|\\u3297|\\u2666|\\u2665|\\u2663|\\u2660|\\u2653|\\u2652|\\u2651|\\u2650|\\u264f|\\u264e|\\u264d|\\u264c|\\u264b|\\u264a|\\u2649|\\u2648|\\u263a|\\u261d|\\u2615|\\u2614|\\u2611|\\u260e|\\u2601|\\u2600|\\u25fe|\\u25fd|\\u25fc|\\u25fb|\\u25c0|\\u25b6|\\u25ab|\\u25aa|\\u24c2|\\u231b|\\u231a|\\u21aa|\\u21a9|\\u2199|\\u2198|\\u2197|\\u2196|\\u2195|\\u2194|\\u2139|\\u2122|\\u2049|\\u203c|\\u2668)([\\uFE0E\\uFE0F]?)))/g,\n\n    // used to find HTML special chars in attributes\n    rescaper = /[&<>'\"]/g,\n\n    // nodes with type 1 which should **not** be parsed (including lower case svg)\n    shouldntBeParsed = /IFRAME|NOFRAMES|NOSCRIPT|SCRIPT|SELECT|STYLE|TEXTAREA|[a-z]/,\n\n    // just a private shortcut\n    fromCharCode = String.fromCharCode;\n\n  return twemoji;\n\n\n  /////////////////////////\n  //  private functions  //\n  //     declaration     //\n  /////////////////////////\n\n  /**\n   * Shortcut to create text nodes\n   * @param   string  text used to create DOM text node\n   * @return  Node  a DOM node with that text\n   */\n  function createText(text) {\n    return document.createTextNode(text);\n  }\n\n  /**\n   * Utility function to escape html attribute text\n   * @param   string  text use in HTML attribute\n   * @return  string  text encoded to use in HTML attribute\n   */\n  function escapeHTML(s) {\n    return s.replace(rescaper, replacer);\n  }\n\n  /**\n   * Default callback used to generate emoji src\n   *  based on Twitter CDN\n   * @param   string    the emoji codepoint string\n   * @param   string    the default size to use, i.e. \"36x36\"\n   * @param   string    optional \"\\uFE0F\" variant char, ignored by default\n   * @return  string    the image source to use\n   */\n  function defaultImageSrcGenerator(icon, options) {\n    return ''.concat(options.base, options.size, '/', icon, options.ext);\n  }\n\n  /**\n   * Given a generic DOM nodeType 1, walk through all children\n   * and store every nodeType 3 (#text) found in the tree.\n   * @param   Element a DOM Element with probably some text in it\n   * @param   Array the list of previously discovered text nodes\n   * @return  Array same list with new discovered nodes, if any\n   */\n  function grabAllTextNodes(node, allText) {\n    var\n      childNodes = node.childNodes,\n      length = childNodes.length,\n      subnode,\n      nodeType;\n    while (length--) {\n      subnode = childNodes[length];\n      nodeType = subnode.nodeType;\n      // parse emoji only in text nodes\n      if (nodeType === 3) {\n        // collect them to process emoji later\n        allText.push(subnode);\n      }\n      // ignore all nodes that are not type 1 or that\n      // should not be parsed as script, style, and others\n      else if (nodeType === 1 && !shouldntBeParsed.test(subnode.nodeName)) {\n        grabAllTextNodes(subnode, allText);\n      }\n    }\n    return allText;\n  }\n\n  /**\n   * Used to both remove the possible variant\n   *  and to convert utf16 into code points\n   * @param   string    the emoji surrogate pair\n   * @param   string    the optional variant char, if any\n   */\n  function grabTheRightIcon(icon, variant) {\n    // if variant is present as \\uFE0F\n    return toCodePoint(\n      variant === '\\uFE0F' ?\n        // the icon should not contain it\n        icon.slice(0, -1) :\n        // fix non standard OSX behavior\n        (icon.length === 3 && icon.charAt(1) === '\\uFE0F' ?\n          icon.charAt(0) + icon.charAt(2) : icon)\n    );\n  }\n\n  /**\n   * DOM version of the same logic / parser:\n   *  emojify all found sub-text nodes placing images node instead.\n   * @param   Element   generic DOM node with some text in some child node\n   * @param   Object    options  containing info about how to parse\n    *\n    *            .callback   Function  the callback to invoke per each found emoji.\n    *            .base       string    the base url, by default twemoji.base\n    *            .ext        string    the image extension, by default twemoji.ext\n    *            .size       string    the assets size, by default twemoji.size\n    *\n   * @return  Element same generic node with emoji in place, if any.\n   */\n  function parseNode(node, options) {\n    var\n      allText = grabAllTextNodes(node, []),\n      length = allText.length,\n      attrib,\n      attrname,\n      modified,\n      fragment,\n      subnode,\n      text,\n      match,\n      i,\n      index,\n      img,\n      alt,\n      icon,\n      variant,\n      src;\n    while (length--) {\n      modified = false;\n      fragment = document.createDocumentFragment();\n      subnode = allText[length];\n      text = subnode.nodeValue;\n      i = 0;\n      while ((match = re.exec(text))) {\n        index = match.index;\n        if (index !== i) {\n          fragment.appendChild(\n            createText(text.slice(i, index))\n          );\n        }\n        alt = match[0];\n        icon = match[1];\n        variant = match[2];\n        i = index + alt.length;\n        if (variant !== '\\uFE0E') {\n          src = options.callback(\n            grabTheRightIcon(icon, variant),\n            options,\n            variant\n          );\n          if (src) {\n            img = new Image();\n            img.onerror = options.onerror;\n            img.setAttribute('draggable', 'false');\n            attrib = options.attributes(icon, variant);\n            for (attrname in attrib) {\n              if (\n                attrib.hasOwnProperty(attrname) &&\n                // don't allow any handlers to be set + don't allow overrides\n                attrname.indexOf('on') !== 0 &&\n                !img.hasAttribute(attrname)\n              ) {\n                img.setAttribute(attrname, attrib[attrname]);\n              }\n            }\n            img.className = options.className;\n            img.alt = alt;\n            img.src = src;\n            modified = true;\n            fragment.appendChild(img);\n          }\n        }\n        if (!img) fragment.appendChild(createText(alt));\n        img = null;\n      }\n      // is there actually anything to replace in here ?\n      if (modified) {\n        // any text left to be added ?\n        if (i < text.length) {\n          fragment.appendChild(\n            createText(text.slice(i))\n          );\n        }\n        // replace the text node only, leave intact\n        // anything else surrounding such text\n        subnode.parentNode.replaceChild(fragment, subnode);\n      }\n    }\n    return node;\n  }\n\n  /**\n   * String/HTML version of the same logic / parser:\n   *  emojify a generic text placing images tags instead of surrogates pair.\n   * @param   string    generic string with possibly some emoji in it\n   * @param   Object    options  containing info about how to parse\n   *\n   *            .callback   Function  the callback to invoke per each found emoji.\n   *            .base       string    the base url, by default twemoji.base\n   *            .ext        string    the image extension, by default twemoji.ext\n   *            .size       string    the assets size, by default twemoji.size\n   *\n   * @return  the string with <img tags> replacing all found and parsed emoji\n   */\n  function parseString(str, options) {\n    return replace(str, function (match, icon, variant) {\n      var\n        ret = match,\n        attrib,\n        attrname,\n        src;\n      // verify the variant is not the FE0E one\n      // this variant means \"emoji as text\" and should not\n      // require any action/replacement\n      // http://unicode.org/Public/UNIDATA/StandardizedVariants.html\n      if (variant !== '\\uFE0E') {\n        src = options.callback(\n          grabTheRightIcon(icon, variant),\n          options,\n          variant\n        );\n        if (src) {\n          // recycle the match string replacing the emoji\n          // with its image counter part\n          ret = '<img '.concat(\n            'class=\"', options.className, '\" ',\n            'draggable=\"false\" ',\n            // needs to preserve user original intent\n            // when variants should be copied and pasted too\n            'alt=\"',\n            match,\n            '\"',\n            ' src=\"',\n            src,\n            '\"'\n          );\n          attrib = options.attributes(icon, variant);\n          for (attrname in attrib) { \n            if (\n              attrib.hasOwnProperty(attrname) &&\n              // don't allow any handlers to be set + don't allow overrides\n              attrname.indexOf('on') !== 0 &&\n              ret.indexOf(' ' + attrname + '=') === -1\n            ) {\n              ret = ret.concat(' ', attrname, '=\"', escapeHTML(attrib[attrname]), '\"');\n            }\n          }\n          ret = ret.concat('>');\n        }\n      }\n      return ret;\n    });\n  }\n\n  /**\n   * Function used to actually replace HTML special chars\n   * @param   string  HTML special char\n   * @return  string  encoded HTML special char\n   */\n  function replacer(m) {\n    return escaper[m];\n  }\n\n  /**\n   * Default options.attribute callback\n   * @return  null\n   */\n  function returnNull() {\n    return null;\n  }\n\n  /**\n   * Given a generic value, creates its squared counterpart if it's a number.\n   *  As example, number 36 will return '36x36'.\n   * @param   any     a generic value.\n   * @return  any     a string representing asset size, i.e. \"36x36\"\n   *                  only in case the value was a number.\n   *                  Returns initial value otherwise.\n   */\n  function toSizeSquaredAsset(value) {\n    return typeof value === 'number' ?\n      value + 'x' + value :\n      value;\n  }\n\n\n  /////////////////////////\n  //  exported functions //\n  //     declaration     //\n  /////////////////////////\n\n  function fromCodePoint(codepoint) {\n    var code = typeof codepoint === 'string' ?\n          parseInt(codepoint, 16) : codepoint;\n    if (code < 0x10000) {\n      return fromCharCode(code);\n    }\n    code -= 0x10000;\n    return fromCharCode(\n      0xD800 + (code >> 10),\n      0xDC00 + (code & 0x3FF)\n    );\n  }\n\n  function parse(what, how) {\n    if (!how || typeof how === 'function') {\n      how = {callback: how};\n    }\n    // if first argument is string, inject html <img> tags\n    // otherwise use the DOM tree and parse text nodes only\n    return (typeof what === 'string' ? parseString : parseNode)(what, {\n      callback:   how.callback || defaultImageSrcGenerator,\n      attributes: typeof how.attributes === 'function' ? how.attributes : returnNull,\n      base:       typeof how.base === 'string' ? how.base : twemoji.base,\n      ext:        how.ext || twemoji.ext,\n      size:       how.folder || toSizeSquaredAsset(how.size || twemoji.size),\n      className:  how.className || twemoji.className,\n      onerror:    how.onerror || twemoji.onerror\n    });\n  }\n\n  function replace(text, callback) {\n    return String(text).replace(re, callback);\n  }\n\n  function test(text) {\n    // IE6 needs a reset before too\n    re.lastIndex = 0;\n    var result = re.test(text);\n    re.lastIndex = 0;\n    return result;\n  }\n\n  function toCodePoint(unicodeSurrogates, sep) {\n    var\n      r = [],\n      c = 0,\n      p = 0,\n      i = 0;\n    while (i < unicodeSurrogates.length) {\n      c = unicodeSurrogates.charCodeAt(i++);\n      if (p) {\n        r.push((0x10000 + ((p - 0xD800) << 10) + (c - 0xDC00)).toString(16));\n        p = 0;\n      } else if (0xD800 <= c && c <= 0xDBFF) {\n        p = c;\n      } else {\n        r.push(c.toString(16));\n      }\n    }\n    return r.join(sep || '-');\n  }\n\n}());"]}